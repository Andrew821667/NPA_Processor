#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ NPA_Processor —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
"""

import sys
from pathlib import Path
import json

def demo_profstandards_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û NPA_PROCESSOR + –ü–†–û–§–°–¢–ê–ù–î–ê–†–¢–´")
    print("=" * 70)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        from npa_searcher import (
            create_integrated_searcher,
            quick_profstandard_search,
            ProfstandardDownloader
        )
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # 1. –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        print("\nüìã 1. –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö –ü–†–û–§–°–¢–ê–ù–î–ê–†–¢–û–í –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú:")
        print("-" * 50)
        
        keywords = ["–ø–µ–¥–∞–≥–æ–≥", "—É—á–∏—Ç–µ–ª—å", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"]
        print(f"–ò—â–µ–º –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keywords}")
        
        try:
            results = quick_profstandard_search(keywords)
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {len(results)}")
            
            for i, ps in enumerate(results[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"\n   {i}. {ps.get('code', 'N/A')} - {ps.get('name', 'N/A')}")
                print(f"      –û–±–ª–∞—Å—Ç—å: {ps.get('area', 'N/A')}")
                print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {ps.get('relevance', 0):.2f}")
                print(f"      –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {ps.get('matched_keywords', [])}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞): {e}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
        print("\nüîß 2. –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ü–û–ò–°–ö–û–í–ò–ö–ê:")
        print("-" * 45)
        
        try:
            npa_searcher, profstandards_integration = create_integrated_searcher()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:")
            methods = [m for m in dir(profstandards_integration) if not m.startswith('_')]
            for method in methods[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –º–µ—Ç–æ–¥–æ–≤
                print(f"   - {method}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞: {e}")
        
        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        print("\nüì• 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ß–ò–ö–ê –ü–†–û–§–°–¢–ê–ù–î–ê–†–¢–û–í:")
        print("-" * 48)
        
        try:
            downloader = ProfstandardDownloader()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {downloader.output_dir}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = downloader.get_statistics()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for key, value in stats.items():
                print(f"   {key}: {value}")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–æ–≤
            test_codes = ["01.001", "invalid", "06.015", "99.999"]
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–æ–≤:")
            for code in test_codes:
                is_valid = downloader._validate_code(code)
                status = "‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π" if is_valid else "‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π"
                print(f"   {code}: {status}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞: {e}")
        
        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–∏–º–∏—Ç–∞—Ü–∏—è)
        print("\nüîç 4. –ü–û–ò–°–ö –ü–†–û–§–°–¢–ê–ù–î–ê–†–¢–û–í –í –¢–ï–ö–°–¢–ï:")
        print("-" * 40)
        
        sample_text = """–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º "–ü–µ–¥–∞–≥–æ–≥" (–∫–æ–¥ 01.001), —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø—Ä–∏–∫–∞–∑–æ–º –ú–∏–Ω—Ç—Ä—É–¥–∞ –†–æ—Å—Å–∏–∏ –æ—Ç 18.10.2013 ‚Ññ 544–Ω, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∏—Ç–µ–ª—é –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º" 06.015."""
        
        print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç:")
        print(sample_text)
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
            import re
            codes = re.findall(r'\b\d{2}\.\d{3}\b', sample_text)
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {codes}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è GPT –∞–Ω–∞–ª–∏–∑–∞
            print("\nü§ñ –ò–º–∏—Ç–∞—Ü–∏—è GPT –∞–Ω–∞–ª–∏–∑–∞:")
            print("   - –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç '–ü–µ–¥–∞–≥–æ–≥' (01.001)")
            print("   - –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ò–°' (06.015)")
            print("   - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–∫–∞–∑–∞ –ú–∏–Ω—Ç—Ä—É–¥–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üí° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ NPA_Processor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    demo_profstandards_integration()
